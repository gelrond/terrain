// ********************************************************************************************************************
import * as THREE from 'three';
// ********************************************************************************************************************
import { clamp } from '../helpers/math.helper';
// ********************************************************************************************************************
import { Colour } from "./colour";
// ********************************************************************************************************************
export class Canvas {

    // ****************************************************************************************************************
    // data - the data
    // ****************************************************************************************************************
    private readonly data: ImageData;

    // ****************************************************************************************************************
    // offsets - the offsets
    // ****************************************************************************************************************
    private readonly offsets: number[][][] = [];

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(public readonly sizeX: number, public readonly sizeY: number) {

        var offset = 0;

        for (var y = 0; y < sizeY; y++) {

            this.offsets[y] = [];

            for (var x = 0; x < sizeX; x++) {

                this.offsets[y][x] = [];

                this.offsets[y][x][0] = offset++;

                this.offsets[y][x][1] = offset++;

                this.offsets[y][x][2] = offset++;

                this.offsets[y][x][3] = offset++;
            }
        }
        this.data = new ImageData(sizeX, sizeY);
    }

    // ****************************************************************************************************************
    // function:    getTexture
    // ****************************************************************************************************************
    // parameters:  wrapping - the wrapping
    // ****************************************************************************************************************
    // returns:     the texture
    // ****************************************************************************************************************
    public getTexture(wrapping: THREE.Wrapping = THREE.ClampToEdgeWrapping): THREE.Texture {

        const canvas = document.createElement('canvas');

        const context = canvas.getContext('2d');

        if (context) {

            canvas.width = this.sizeX; canvas.height = this.sizeY;

            context.putImageData(this.data, 0, 0);

            return new THREE.CanvasTexture(context.canvas, THREE.UVMapping, wrapping, wrapping);
        }
        return new THREE.Texture();
    }

    // ****************************************************************************************************************
    // function:    setPixel
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    //              colour - the colour
    // ****************************************************************************************************************
    // returns:     n/a
    // ****************************************************************************************************************
    public setPixel(x: number, y: number, colour: Colour): void {

        if (x >= 0 && x < this.sizeX && y >= 0 && y < this.sizeY) {

            const offsets = this.offsets[y][x];

            if (offsets.length === 4) {

                this.data.data[offsets[0]] = clamp(colour.r * 255, 0, 255);

                this.data.data[offsets[1]] = clamp(colour.g * 255, 0, 255);

                this.data.data[offsets[2]] = clamp(colour.b * 255, 0, 255);

                this.data.data[offsets[3]] = clamp(colour.a * 255, 0, 255);
            }
        }
    }
}
