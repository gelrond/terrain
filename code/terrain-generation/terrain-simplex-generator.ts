// ********************************************************************************************************************
import { createNoise2D, NoiseFunction2D } from "simplex-noise";
import { Generator } from "../generators/generator";
import { clampZeroOne } from "../helpers/math.helper";
import { TerrainCellGrid } from "../terrain-cell/terrain-cell-grid";
// ********************************************************************************************************************
export class TerrainSimplexGenerator extends Generator<TerrainCellGrid> {

    // ****************************************************************************************************************
    // noise - the noise
    // ****************************************************************************************************************
    private readonly noise: NoiseFunction2D = createNoise2D();

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(public readonly size: number = 512, public readonly divisors: number[] = [64, 256, 512]) { super(); }

    // ****************************************************************************************************************
    // function:    generate
    // ****************************************************************************************************************
    // parameters:  n/a
    // ****************************************************************************************************************
    // returns:     the target
    // ****************************************************************************************************************
    public generate(): TerrainCellGrid {

        const target = new TerrainCellGrid(this.size, this.size);

        for (var x = 0; x < this.size; x++) {

            for (var y = 0; y < this.size; y++) {

                const tgt = target.get(x, y);

                tgt.height = this.getHeight(x, y);
            }
        }
        return target;
    }

    // ****************************************************************************************************************
    // function:    getHeight
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    // returns:     the height
    // ****************************************************************************************************************
    private getHeight(x: number, y: number): number {

        var height = 0;

        if (this.divisors.length) {

            for (const divisor of this.divisors) {

                const value = this.getHeightFor(x, y, divisor);

                height = height ?? height * value;
            }
        }
        return clampZeroOne(height);
    }

    // ****************************************************************************************************************
    // function:    getHeightFor
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    //              divisor - the divisor
    // ****************************************************************************************************************
    // returns:     the height
    // ****************************************************************************************************************
    private getHeightFor(x: number, y: number, divisor: number): number {

        const result = divisor > 0 ? ((this.noise(x / divisor, y / divisor) * 0.5) + 0.5) : 0;

        return result;
    }
}
