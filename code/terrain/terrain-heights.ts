// ********************************************************************************************************************
import { createNoise2D, NoiseFunction2D } from 'simplex-noise';
import { abs, clampZeroOne, max, min } from '../helpers/math.helper';
import { ITerrainHeights } from './terrain-heights.interface';
import { TerrainVariance } from './terrain-variance';
import { ITerrainVariance } from './terrain-variance.interface';
// ********************************************************************************************************************
export class TerrainHeights implements ITerrainHeights {

    // ****************************************************************************************************************
    // noise - the noise
    // ****************************************************************************************************************
    private readonly noise: NoiseFunction2D = createNoise2D();

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(private divisor1: number = 64, private divisor2: number = 256, private divisor3: number = 512) { }

    // ****************************************************************************************************************
    // function:    getHeight
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    // returns:     the height
    // ****************************************************************************************************************
    public getHeight(x: number, y: number): number {

        const noise1 = (this.noise(x / this.divisor1, y / this.divisor1) * 0.5) + 0.5;

        const noise2 = (this.noise(x / this.divisor2, y / this.divisor2) * 0.5) + 0.5;

        const noise3 = (this.noise(x / this.divisor3, y / this.divisor3) * 0.5) + 0.5;

        return clampZeroOne(noise1 * noise2 * noise3);
    }

    // ****************************************************************************************************************
    // function:    getVariance
    // ****************************************************************************************************************
    // parameters:  x1 - the x1
    // ****************************************************************************************************************
    //              y1 - the y1
    // ****************************************************************************************************************
    //              x2 - the x2
    // ****************************************************************************************************************
    //              y2 - the y2
    // ****************************************************************************************************************
    // returns:     the variance
    // ****************************************************************************************************************
    public getVariance(x1: number, y1: number, x2: number, y2: number): ITerrainVariance | null {

        // ************************************************************************************************************
        // setup variables
        // ************************************************************************************************************

        const dx = abs(x2 - x1); if (dx <= 1) return null;

        const dy = abs(y2 - y1); if (dy <= 1) return null;

        var minimum = Number.MAX_SAFE_INTEGER;

        var maximum = Number.MIN_SAFE_INTEGER;

        // ************************************************************************************************************
        // obtain variance
        // ************************************************************************************************************

        for (var x = 0; x < dx; x++) {

            for (var y = 0; y < dy; y++) {

                const height = this.getHeight(x1 + x, y1 + y);

                minimum = min(minimum, height);

                maximum = max(maximum, height);
            }
        }

        // ************************************************************************************************************
        // obtain children
        // ************************************************************************************************************

        const variance = new TerrainVariance(abs(maximum - minimum));

        if (variance.variance > 0) {

            const cx = x1 + (dx >> 1);

            const cy = y1 + (dy >> 1);

            variance.varianceNw = this.getVariance(x1, y1, cx, cy);

            variance.varianceNe = this.getVariance(cx, y1, x2, cy);

            variance.varianceSe = this.getVariance(cx, cy, x2, y2);

            variance.varianceSw = this.getVariance(x1, cy, cx, y2);
        }
        return variance;
    }
}
