// ********************************************************************************************************************
import { max } from "../../helpers/math.helper";
// ********************************************************************************************************************
import { Modifier } from "../../modifiers/modifier";
// ********************************************************************************************************************
import { IProgress } from "../../progress/progress.interface";
// ********************************************************************************************************************
import { TerrainDataGrid } from "../terrain-data/terrain-data-grid";
// ********************************************************************************************************************
export class TerrainModifierSmooth extends Modifier<TerrainDataGrid, TerrainDataGrid> {

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(public readonly progress: IProgress, public readonly passes: number = 1, public readonly distance: number = 3) { super(); }

    // ****************************************************************************************************************
    // function:    modify
    // ****************************************************************************************************************
    // parameters:  source - the source
    // ****************************************************************************************************************
    // returns:     the target
    // ****************************************************************************************************************
    public modify(source: TerrainDataGrid): TerrainDataGrid {

        const radius = max(1, this.distance >> 1);

        for (var pass = 0; pass < this.passes; pass++) {

            source = this.modifyPass(source, radius, pass + 1);
        }
        return source;
    }

    // ****************************************************************************************************************
    // function:    modifyPass
    // ****************************************************************************************************************
    // parameters:  source - the source
    // ****************************************************************************************************************
    //              radius - the radius
    // ****************************************************************************************************************
    //              pass - the pass
    // ****************************************************************************************************************
    // returns:     the target
    // ****************************************************************************************************************
    public modifyPass(source: TerrainDataGrid, radius: number, pass: number): TerrainDataGrid {

        this.progress.begin(source.total, 'Smoothing - Pass ' + pass);

        const target = new TerrainDataGrid(source.sizeX, source.sizeY);

        for (var x = 0; x < source.sizeX; x++) {

            for (var y = 0; y < source.sizeY; y++) {

                // ****************************************************************************************************
                // calculate average in area
                // ****************************************************************************************************

                var height = 0, count = 0;

                for (var ix = x - radius; ix <= x + radius; ix++) {

                    for (var iy = y - radius; iy <= y + radius; iy++) {

                        if (source.isValid(ix, iy)) {

                            const src = source.get(ix, iy);

                            height += src.height; count++;
                        }
                    }
                }

                // ****************************************************************************************************
                // update target
                // ****************************************************************************************************

                const tgt = target.get(x, y);

                tgt.height = height / count;

                this.progress.next();
            }
        }
        return target;
    }
}
