// ********************************************************************************************************************
import { createNoise2D, NoiseFunction2D } from 'simplex-noise';
// ********************************************************************************************************************
import { abs, clampZeroOne, max, min } from '../helpers/math.helper';
// ********************************************************************************************************************
import { Colour } from '../types/colour';
// ********************************************************************************************************************
import { Vector2 } from '../types/vector2';
// ********************************************************************************************************************
import { Vector3 } from '../types/vector3';
// ********************************************************************************************************************
import { ITerrainProvider } from './terrain-provider.interface';
// ********************************************************************************************************************
import { TerrainVariance } from './terrain-variance';
// ********************************************************************************************************************
import { ITerrainVariance } from './terrain-variance.interface';
// ********************************************************************************************************************
export class TerrainProvider implements ITerrainProvider {

    // ****************************************************************************************************************
    // noise - the noise
    // ****************************************************************************************************************
    private readonly noise: NoiseFunction2D = createNoise2D();

    // ****************************************************************************************************************
    // constructor
    // ****************************************************************************************************************
    constructor(private divisor1: number = 64, private divisor2: number = 256, private divisor3: number = 512) { }

    // ****************************************************************************************************************
    // function:    getColour
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    // returns:     the colour
    // ****************************************************************************************************************
    public getColour(x: number, y: number): Colour {

        const height = this.getHeight(x, y);

        return new Colour(height, height, height);
    }

    // ****************************************************************************************************************
    // function:    getGradient
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    //              multiplier - the multiplier
    // ****************************************************************************************************************
    // returns:     the gradient
    // ****************************************************************************************************************
    public getGradient(x: number, y: number, multiplier: number = 8): Vector2 {

        // ************************************************************************************************************
        // obtain heights
        // ************************************************************************************************************

        const heightN = this.getHeight(x, y - 1) * multiplier;

        const heightE = this.getHeight(x + 1, y) * multiplier;

        const heightS = this.getHeight(x, y + 1) * multiplier;

        const heightW = this.getHeight(x - 1, y) * multiplier;

        // ************************************************************************************************************
        // obtain gradient
        // ************************************************************************************************************

        var gx = (heightE - heightW);

        var gy = (heightS - heightN);

        return new Vector2(gx, gy);
    }

    // ****************************************************************************************************************
    // function:    getHeight
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    // returns:     the height
    // ****************************************************************************************************************
    public getHeight(x: number, y: number): number {

        const noise1 = (this.noise(x / this.divisor1, y / this.divisor1) * 0.5) + 0.5;

        const noise2 = (this.noise(x / this.divisor2, y / this.divisor2) * 0.5) + 0.5;

        const noise3 = (this.noise(x / this.divisor3, y / this.divisor3) * 0.5) + 0.5;

        return clampZeroOne(noise1 * noise2 * noise3);
    }

    // ****************************************************************************************************************
    // function:    getNormal
    // ****************************************************************************************************************
    // parameters:  x - the x
    // ****************************************************************************************************************
    //              y - the y
    // ****************************************************************************************************************
    //              multiplier - the multiplier
    // ****************************************************************************************************************
    // returns:     the normal
    // ****************************************************************************************************************
    public getNormal(x: number, y: number, multiplier: number = 8): Vector3 {

        const gradient = this.getGradient(x, y, multiplier);

        const normal = new Vector3(gradient.x, 1, gradient.y);

        return normal;
    }

    // ****************************************************************************************************************
    // function:    getVariance
    // ****************************************************************************************************************
    // parameters:  x1 - the x1
    // ****************************************************************************************************************
    //              y1 - the y1
    // ****************************************************************************************************************
    //              x2 - the x2
    // ****************************************************************************************************************
    //              y2 - the y2
    // ****************************************************************************************************************
    //              limiter - the limiter
    // ****************************************************************************************************************
    // returns:     the variance
    // ****************************************************************************************************************
    public getVariance(x1: number, y1: number, x2: number, y2: number, limiter: number): ITerrainVariance | null {

        // ************************************************************************************************************
        // setup variables
        // ************************************************************************************************************

        var minimum = Number.MAX_SAFE_INTEGER;

        var maximum = Number.MIN_SAFE_INTEGER;

        // ************************************************************************************************************
        // obtain minimum and maximum
        // ************************************************************************************************************

        for (var x = x1; x <= x2; x++) {

            for (var y = y1; y <= y2; y++) {

                const height = this.getHeight(x, y);

                minimum = min(minimum, height);

                maximum = max(maximum, height);
            }
        }

        // ************************************************************************************************************
        // obtain difference
        // ************************************************************************************************************

        const difference = abs(maximum - minimum);

        if (difference < limiter) return null;

        const variance = new TerrainVariance(difference);

        // ************************************************************************************************************
        // check level
        // ************************************************************************************************************

        const dx = abs(x2 - x1);

        const dy = abs(y2 - y1);

        if (dx <= 1) return variance;

        if (dy <= 1) return variance;

        // ************************************************************************************************************
        // find children
        // ************************************************************************************************************

        const cx = x1 + (dx >> 1);

        const cy = y1 + (dy >> 1);

        variance.varianceNw = this.getVariance(x1, y1, cx, cy, limiter);

        variance.varianceNe = this.getVariance(cx, y1, x2, cy, limiter);

        variance.varianceSe = this.getVariance(cx, cy, x2, y2, limiter);

        variance.varianceSw = this.getVariance(x1, cy, cx, y2, limiter);

        return variance;
    }
}
